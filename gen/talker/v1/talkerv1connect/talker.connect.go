// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: talker/v1/talker.proto

package talkerv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/yolocs/try-connect/gen/talker/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TalkerServiceName is the fully-qualified name of the TalkerService service.
	TalkerServiceName = "talker.v1.TalkerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TalkerServiceHelloProcedure is the fully-qualified name of the TalkerService's Hello RPC.
	TalkerServiceHelloProcedure = "/talker.v1.TalkerService/Hello"
)

// TalkerServiceClient is a client for the talker.v1.TalkerService service.
type TalkerServiceClient interface {
	// Say hello with something OK to audit log in request/response.
	Hello(context.Context, *connect_go.Request[v1.HelloRequest]) (*connect_go.Response[v1.HelloResponse], error)
}

// NewTalkerServiceClient constructs a client for the talker.v1.TalkerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTalkerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TalkerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &talkerServiceClient{
		hello: connect_go.NewClient[v1.HelloRequest, v1.HelloResponse](
			httpClient,
			baseURL+TalkerServiceHelloProcedure,
			opts...,
		),
	}
}

// talkerServiceClient implements TalkerServiceClient.
type talkerServiceClient struct {
	hello *connect_go.Client[v1.HelloRequest, v1.HelloResponse]
}

// Hello calls talker.v1.TalkerService.Hello.
func (c *talkerServiceClient) Hello(ctx context.Context, req *connect_go.Request[v1.HelloRequest]) (*connect_go.Response[v1.HelloResponse], error) {
	return c.hello.CallUnary(ctx, req)
}

// TalkerServiceHandler is an implementation of the talker.v1.TalkerService service.
type TalkerServiceHandler interface {
	// Say hello with something OK to audit log in request/response.
	Hello(context.Context, *connect_go.Request[v1.HelloRequest]) (*connect_go.Response[v1.HelloResponse], error)
}

// NewTalkerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTalkerServiceHandler(svc TalkerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	talkerServiceHelloHandler := connect_go.NewUnaryHandler(
		TalkerServiceHelloProcedure,
		svc.Hello,
		opts...,
	)
	return "/talker.v1.TalkerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TalkerServiceHelloProcedure:
			talkerServiceHelloHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTalkerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTalkerServiceHandler struct{}

func (UnimplementedTalkerServiceHandler) Hello(context.Context, *connect_go.Request[v1.HelloRequest]) (*connect_go.Response[v1.HelloResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("talker.v1.TalkerService.Hello is not implemented"))
}
